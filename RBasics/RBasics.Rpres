

Some Basics of the R Language
========================================================
author: Thomas Petzoldt
date: 2017-11-01
width: 1024
height: 768


Prerequisites
========================================================

- R 3.x is installed
- Recent version of RStudio

***

- Basic intuitive experience with R
- vectors, arithmetics
- basic plotting
- function arguments


Expressions and Assignments
========================================================

Expression

```{r}
1 - pi + exp(1.7)
````

- is printed to the screen
- the [1] indicates that the value shown at the beginning of the line is the first (and here the only) element

***

Assignment
```{r}
a <- 1 - pi + exp(1.7)
```

- The expression on the left hand side is assigned to the variable on the right.
- The arrow is spelled as
  "a gets ..."

Assignments
========================================================

Assignment of a constant and a variable
```{r}
x <- 1.3
y <- "hello"
a <- x
```

* Assignment in opposite direction (rarely used)
```{r}
x -> b
```


* multiple assignment
```{r}
x <- a <- b
```


* Equal sign works similar to `<-` but is less powerful.
```{r}
x = a
```

* Super Assignment (for special cases)
```{r}
x <<- 2
```



The elements of the R language
========================================================
type:prompt

A short classification of R's language elemnts:

- objects
- constants
- variables
- operators
- functions


Objects, constants, variables
========================================================

Everything stored in R's memory is an **object**. Objects are specialized data structures that can be simple or very complex.

Objects can be constant or variable.

**constants**: 1, 123, 5.6, 5e7, "hello"

**variables**: can change their value are referenced by variable names (symbols)

x <- 2 # x is a variable, 2 a constant

Valid variable names: A syntactically valid name consists of letters,
numbers and the dot or underline characters and starts with a letter or the dot not followed by a number.

Special characters, except _ and . (underscore and dot) are not allowed.

International characters (e.g German umlauts &auml;, &ouml;, &uuml;, ...) are possible, but not recommended.

Allowed and disallowed variable names
========================================================

correct:
- x, y, X, x1, i, j, k,
- value, test, myVariableName, do_something,
- .hidden, .x1

forbidden:
- 1x, .1x (starts with a number)
- !, @, \$, #, space, comma, semicolon and other special characters

reserved words cannot be used as variable names:
- if, else, repeat, while, function, for, in, next, break
- TRUE, FALSE, NULL, Inf, NaN, NA, NA\_integer\_, NA\_real\_, NA\_complex\_, NA\_character\_,
- ..., ..1, ..2

**Note:** R is case sensitive, x and X, value and Value are different.

Operators
========================================================

![operators](img/operators.png)

Functions
========================================================

Pre-defined functions:
- have a return value or a side effect
- examples with return value: sin(x), log(x)
- examples side effect: plot(x), print(x)
- both return value and side efect: hist(x)

Arguments: mandatory or optional, un-named or named
- plot(1:4, c(3,4,3,6), type="l", col="red")
- if argument names are used (with the "=" sigh), then argument order does not matter

User-defined functions:
- can be used to extend R
- will be discussed later

Functions have a name that is followed by arguments in round parentheses.

Parentheses
========================================================

![parentheses](img/parentheses.png)


Data objects
========================================================
type: prompt

**R** supports different classes of data objects.

Data objects can contain single values, vectors, matrices, tables, numbers, text and even maps, sound, images or video sequences.

We start with vectors, matrices and arrays, and data frames.


Vectors, matrices and arrays
========================================================

- vectors = 1D, matrices = 2D and arrays = n-D
- data are arranged into rows, columns, layers, etc.
- data filled in column-wise, but structure can always be changed

```{r}
x <- 1:20
x
y <- matrix(x, nrow=5, ncol=4)
y
as.vector(y)
```


Vectors, matrices and arrays II
========================================================

- **recycling rule** if the number of elements is too small

```{r}
x <- matrix(0, nrow=5, ncol=4)
x
x <- matrix(1:4, nrow=5, ncol=4)
x
```

***


- **row-wise** creation of a matrix
```{r}
x <- matrix(1:20, nrow=5, ncol=4, byrow=TRUE)
x
```

- **transpose** of a matrix
```{r}
x <- t(x)
x
```

Accessing array elements
========================================================

- a three dimensional **array**
- row, column, layer/page
- sub-matrices (slices)

```{r}
x <- array(1:24, dim=c(3,4,2))
x
```

***

- **elements** of a matrix or array

```{r}
x[1, 3, 1] # single element
x[ , 3, 1] # 3rd column of 1st layer
x[ ,  , 2] # second layer
x[1,  ,  ] # another slice
```

Reordering and indirect indexing
========================================================

Original matrix

```{r}
(x <- matrix(1:20, nrow=4))
```

Inverted row order
```{r}
x[4:1, ]
```

***

Indirect index
```{r}
x[c(1,2,1,2), c(1,3,2,5,4)]
```

Logical selection
```{r}
x[c(FALSE, TRUE, FALSE, TRUE), ]
```

Surprise?
```{r}
x[c(0,1,0,1), ]
```

Matrix algebra
========================================================

Matrix

```{r}
(x <- matrix(1:4,   nrow=2))

```

Diagonal matrix
```{r}
(y <- diag(2))
```


Element wise addition and multiplication
```{r}
x * (y + 1)
```

***

Outer product (and sum)

```{r}
1:4 %o% 1:4
outer(1:4, 1:4, FUN = "+")
```

Matrix multiplication

```{r}
x %*% y
```

Matrix multiplication in detail
========================================================

![matrix multiplication](img/matrix_multiplication.gif)

Transpose and inverse
========================================================

Matrix
```{r}
x <- matrix(c(1,2,3,4,3,2,5,4,6),
            nrow=3)
x
```

Transpose
```{r}
t(x)
```

***

Inverse ($x^{-1}$)
```{r, eval=FALSE}
solve(x)
```

```{r, echo=FALSE}
round(solve(x), 4)
```

$x \cdot x^{-1}$

```{r}
x %*% solve(x)
```


Linear system of equations
========================================================

$$
\begin{aligned}
 3x && +  && 2y   && -  && z  && =  && 1 \\
 2x && -  && 2y   && +  && 4z && =  && -2 \\
 -x && +  && 1/2y && -  && z  && =  && 0
\end{aligned}
$$


```{r}
A <- matrix(c(3,  2,   -1,
             2,  -2,    4,
            -1,   0.5, -1), nrow=3, byrow=TRUE)
b <- c(1, -2, 0)
```

$$
\begin{aligned}
Ax &= b\\
x  &= A^{-1}b
\end{aligned}
$$

```{r}
solve(A) %*% b
```

Data frames
========================================================

* represents tabular data
* similar to matrices, but rows are allowed to contain different types of data in their **columns**
* typically imported from a file with `read.table` or `read.csv`

```{r}
cities <- read.csv("data/cities.csv", header=TRUE)
cities
```


Data import assistant
========================================================

File --> Import Dataset

Several options are available, depending on **RStudio**'s version.

* "From text (base)" uses the classical R functions
* "From text (readr)" is more modern and uses an add-on package
* "From Excel"" can read Excel files if (and only if) they have a clear tabular structure

**Note:** The examples in this course are best tested with "From text (base)"**!!!**


From text (base)
========================================================

![From text (base)](img/rstudio-import-base.png)

From text (readr)
========================================================

![From text (readr)](img/rstudio-import-readr.png)


Save data in an Excel-compatible text format
========================================================


![Data frame in Excel](img/dataframe-excel.png)

English number format (**.** as decimal):
```{r}
write.table(cities, "output.csv", row.names = FALSE, sep=",")
```

German number format (**,** as decimal):
```{r}
write.table(cities, "output.csv", row.names = FALSE, sep=";", dec=",")
```

Lists
========================================================
type: prompt

Lists
========================================================

* most flexible data type in R
* allows tree-like  structure

Creation of lists


```{r}
L1 <- list(a=1:10, b=c(1,2,3), x="hello")
```

* lists within lists
* `str` shows tree-like structure:

```{r}
L2 <- list(a=5:7, b=L1)
str(L2)
```

***

Access to list elements by names
```{r}
L2$a
L2$b$a
```

or with indices
```{r}
L2[1]   # a list with 1 element
L2[[1]] # content of 1st element
```

Lists II
========================================================

Convert list to vector
```{r}
unlist(L2)
str(unlist(L2))
```

Flatten list (remove only top level of list)
```{r}
str(unlist(L2, recursive = FALSE))
```


Lists, vectors and data frames
========================================================

Convert vector to list
```{r}
x <- 1:3
str(as.list(x))
```

Convert matrix to data frame
```{r}
x <- matrix(1:16, nrow=4)
df <- as.data.frame(x)
is.list(df)
df
```

***

Convert data frame to matrix
```{r}
as.matrix(df)
```

Append column to data frame
```{r}
df2 <- cbind(df, id=c("first", "second", "third", "fourth"))
```

Data frame with character column
```{r}
as.matrix(df2)
```



Naming of elements
========================================================

During creation

```{r}
x <- c(a=1.2, b=2.3, c=6)
L <- list(a=1:3, b="hello")
```

With `names`-function

```{r}
names(L)
names(L) <- c("numbers", "text")
names(L)
```

```{r}
x <- 1:5
names(x) <- letters[1:5]
x
```


Select and reorder data frame columns
========================================================

```{r}
x <- matrix(1:16, nrow=4)
df <- as.data.frame(x)
df
names(df) <- c("N", "P", "O2", "C")
df
df2 <- df[c("C", "N", "P")]
df2
```


Apply FUN to all elements of a list
========================================================

```{r}
df  # data frame of previous slide
lapply(df, mean)  # returns list
sapply(df, mean)  # returns vector
```

***

Row wise apply
```{r}
apply(df, MARGIN = 1, sum)
```

Column wise apply
```{r}
apply(df, MARGIN = 2, sum)
```

Apply user defined function
```{r eval=FALSE}
se <- function(x)
  sd(x)/sqrt(length(x))

sapply(df, se)
```

```{r, echo=FALSE}
se <- function(x)
  sd(x)/sqrt(length(x))

round(sapply(df, se), 4)
```


Loops and conditional execution
========================================================
type: prompt

Loops
========================================================

```{r}
for (i in 1:4) {
  cat(i, 2*i, "\n")
}
```


```{r}
j <- 1; x <- 0
while (j > 1e-3) {
  j <- 0.1 * j
  x <- x + j
  cat(j, x, "\n")
}
```

In many cases, loops can be avoided by using vectors and matrices or `apply`.

***

```{r}
x <- 1
repeat {
 x <- 0.1*x
 cat(x, "\n")
 if (x < 1e-4) break
}
```

```{r}
for (i in 1:3) {
  for (j in c(1,3,5)) {
    cat(i, i*j, "\n")
  }
}
```


Avoidable loops
========================================================

Column means of a data frame
```{r}
## a data frame
df <- data.frame(
  N=1:4, P=5:8, O2=9:12, C=13:16
)

## loop
m <- numeric(4)
for(i in 1:4) {
 m[i] <- mean(df[,i])
}
m
```

* easier without loop
```{r}
sapply(df, mean)
```

... also possible `colMeans`

***
An infinite series:

$$
\sum_{k=1}^{\infty}\frac{(-1)^{k-1}}{2k-1} = 1 - \frac{1}{3} + \frac{1}{5} - \frac{1}{7}
$$

```{r}
x <- 0
for (k in seq(1, 1e5)) {
  enum  <- (-1)^(k-1)
  denom <- 2*k-1
  x <- x + enum/denom
}
4 * x
```

$\Rightarrow$ Can you vectorize this?

Neccessary loop
========================================================

The same series:

$$
\sum_{k=1}^{\infty}\frac{(-1)^{k-1}}{2k-1} = 1 - \frac{1}{3} + \frac{1}{5} - \frac{1}{7}
$$

```{r}
x <- 0
k <- 0
repeat {
  k <- k + 1
  enum  <- (-1)^(k-1)
  denom <- 2*k-1
  delta <- enum/denom
  x <- x + delta
  if (abs(delta) < 1e-6) break
}
4 * x
```

* number of iterations not known in advance
* convergence criterium, stop when required precision is reached
* no allocation of long vectors --> less memory than for loop

<small>Note: there are more efficient methods to calculate $\pi$.</small>


if-clause
========================================================

The example before showed already an `if`-clause. The syntax is as follows:

```{r,eval=FALSE}
if (<condition>)
  <statement>
else if (<condition>)
  <statement>
else
  <statement>
```

* Proper indentation improves readability. Suggestion 2: characters.
* Professionals indent always.
* Please do!

***

* `statement` can of course be a compound statement with curly brackets `{}`
* to be on the safe side and to avoid common errors you may always use `{}`.

Example:
```{r,eval=FALSE}
if (x == 0) {
  print("x is Null")
} else if (x < 0) {
  print("x is negative")
} else {
  print("x is positive")
}
```

Vectorized if
========================================================

Very often, a vectorized `ifelse` is more appropropriate than an `if`-function.

Let's assume we have a data set of chemical measurements `x` with missing `NA` values,
and "nondetects" that are encoded with `-99`. First we want to replace the nontetects
with half of the detection limit (e.g. 0.5):

```{r}
x <- c(3, 6, NA, 5, 4, -99, 7, NA,  8, -99, -99, 9)
x2 <- ifelse(x == -99, 0.5, x)
x2
```

Now let's remove the `NA`s:

```{r}
na.omit(x2)
```

This returns a special object, that can be used like a normal vector.


Further Reading
===============

More about this can be found in the official R manuals, especially in **An Introduction to R**.

* see: https://cran.r-project.org  $\longrightarrow$ Manuals


This tutorial was made with R-Presentations of **RStudio**
* see: https://www.rstudio.org

Author: https://www.tu-dresden.de/Members/thomas.petzoldt


